col = as.integer(data$relation[id]))
legend("topright", paste("assumed", levels(data$relation)),
col = 1:nlevels(data$relation), pch = 15, bty = "n")
return(invisible(data[id,]))
} else
return(invisible(data))
}
##' convert DNA methylation beta-value to inferred genotypes
##'
##' Using kmeans unsupervised clustering to infer genotypes based on
##' idea's from Leonard Schalkwyk; wateRmelon packages.
##'
##' 'minSep' and 'minSize' ensure good clusters are found.
##' This function is similar to the gaphunter approach implemented in minfi.
##' @title converts beta-values to genotypes (1, 2 and 3)
##' @param betas beta matrix of probes possibly affected SNPs; if this is a
##' SummarizedExperiment or a MultiAssayExperiment assayName must also be
##' specified
##' @param na.rm TRUE drop cpg for which no clustering was observed
##' @param minSep minimal separation between clusters
##' @param minSize size of smallest cluster (in percentage)
##' @param centers center of clusters, defaults to 0.2, 0.5, 0.8.
##' @param assayName the name of the assay to be used (see betas)
##' @return matrix with genotypes
##' @author mvaniterson
##' @importFrom stats kmeans
##' @importFrom SummarizedExperiment assays
##' @importFrom MultiAssayExperiment assays
##' @importFrom methods extends
##' @export
##' @examples
##' set.seed(12345)
##' beta <- matrix(runif(100*10, 0,1), nrow=100)
##' beta[1:5, 1:5]
##' genotype <- beta2genotype(beta)
##' genotype[1:5, 1:5]
beta2genotype <- function (betas, na.rm = TRUE, minSep = 0.25, minSize = 5,
centers = c(0.2, 0.5, 0.8), assayName = NULL) {
if(extends(class(betas), "SummarizedExperiment") |
extends(class(betas), "MultiAssayExperiment")) { #if betas is an SE or MAE
if(is.null(assayName))
stop("Assay name should be given!") #assayName must be given
betas <- assays(betas)[[assayName]] #so the specified assay can be retrieved and used as betas
}
genotypes <- apply(betas, 1, function(x) {
km <- try(kmeans(as.numeric(x), centers), silent = TRUE)
if( !inherits(km, "try-error") ) {
if( all(abs(rep(km$centers, 3) -
rep(km$centers, each = 3))[-c(1, 5, 9)] > minSep) ) {
if( 100 * min(as.numeric(table(km$cluster)))/length(x) >
minSize )
return(km$cluster)
}
}
return(rep(NA, length(x)))
})
genotypes <- t(genotypes)
colnames(genotypes) <- colnames(betas)
rownames(genotypes) <- rownames(betas)
if( na.rm ) {
nas <- apply(genotypes, 1, anyNA)
genotypes <- genotypes[!nas, ]
}
genotypes
}
allelesSharedSq <- .square(x, x, verbose = FALSE)
??colVars
library(matrixStats)
allelesSharedSq <- .square(x, x, verbose = FALSE)
allelesSharedRect <- .rectangular(x, x, verbose = FALSE)
View(allelesSharedRect)
library(SummarizedExperiment)
SummarizedExperiment(x)
library(MultiAssayExperiment)
MultiAssayExperiment(x)
MultiAssayExperiment(experiments = x)
pheno <- DataFrame(id = 1:4, type = c("a", "a", "b", "b"),
sex = c("M", "F", "M", "F"),
row.names = c("Bob", "Sandy", "Jake", "Lauren"))
dataset1 <- matrix(rnorm(20, 5, 1), ncol = 5,
dimnames = list(paste0("GENE", 4:1),
paste0("sample", LETTERS[1:5])))
dataset2 <- matrix(rnorm(12, 3, 2), ncol = 3,
dimnames = list(paste0("ENST0000", 1:4),
paste0("samp", letters[1:3])))
expList <- list(exp1 = dataset1, exp2 = dataset2)
map1 <- DataFrame(primary = c("Bob", "Jake", "Sandy", "Sandy", "Lauren"),
colname = paste0("sample", LETTERS[1:5]))
map2 <- DataFrame(primary = c("Jake", "Sandy", "Lauren"),
colname = paste0("samp", letters[1:3]))
View(map1)
mae
pheno <- DataFrame(id = 1:4, type = c("a", "a", "b", "b"),
sex = c("M", "F", "M", "F"),
row.names = c("Bob", "Sandy", "Jake", "Lauren"))
dataset1 <- matrix(rnorm(20, 5, 1), ncol = 5,
dimnames = list(paste0("GENE", 4:1),
paste0("sample", LETTERS[1:5])))
dataset2 <- matrix(rnorm(12, 3, 2), ncol = 3,
dimnames = list(paste0("ENST0000", 1:4),
paste0("samp", letters[1:3])))
expList <- list(exp1 = dataset1, exp2 = dataset2)
map1 <- DataFrame(primary = c("Bob", "Jake", "Sandy", "Sandy", "Lauren"),
colname = paste0("sample", LETTERS[1:5]))
map2 <- DataFrame(primary = c("Jake", "Sandy", "Lauren"),
colname = paste0("samp", letters[1:3]))
sampMap <- listToMap(list(exp1 = map1, exp2 = map2))
mae <- MultiAssayExperiment(expList, pheno, sampMap)
mae
assays(mae)
assays(mae)$exp1
x
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
y <- matrix(c(3,3,3, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
pheno <- DataFrame(id = 1:4, type = c("a", "a", "b", "b"),
sex = c("M", "F", "M", "F"),
row.names = c("Bob", "Sandy", "Jake", "Lauren"))
expList <- list(exp1 = dataset1, exp2 = dataset2)
map1 <- DataFrame(primary = c("Bob", "Jake", "Sandy"),
colname = paste0("sample", LETTERS[1:3]))
map2 <- DataFrame(primary = c("Jake", "Sandy", "Lauren"),
colname = paste0("samp", letters[1:3]))
sampMap <- listToMap(list(exp1 = map1, exp2 = map2))
mae <- MultiAssayExperiment(expList, pheno, sampMap)
mae
assays(mae)
assays(mae)$exp1
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
y <- matrix(c(3,3,3, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
pheno <- DataFrame(id = 1:4, type = c("a", "a", "b", "b"),
sex = c("M", "F", "M", "F"),
row.names = c("Bob", "Sandy", "Jake", "Lauren"))
expList <- list(exp1 = x, exp2 = y)
map1 <- DataFrame(primary = c("Bob", "Jake", "Sandy"),
colname = paste0("sample", LETTERS[1:3]))
map2 <- DataFrame(primary = c("Jake", "Sandy", "Lauren"),
colname = paste0("samp", letters[1:3]))
sampMap <- listToMap(list(exp1 = map1, exp2 = map2))
mae <- MultiAssayExperiment(expList, pheno, sampMap)
mae
assays(mae)$exp1
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
y <- matrix(c(3,3,3, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
pheno <- DataFrame(id = 1:4, type = c("a", "a", "b"),
sex = c("M", "F", "M"),
row.names = c("sample1", "sample2", "sample3"))
expList <- list(exp1 = x, exp2 = y)
map1 <- DataFrame(primary = c("sample1", "sample2", "sample3"),
colname = paste0("sample", LETTERS[1:3]))
map2 <- DataFrame(primary = c("sample1", "sample2", "sample3"),
colname = paste0("samp", letters[1:3]))
sampMap <- listToMap(list(exp1 = map1, exp2 = map2))
mae <- MultiAssayExperiment(expList, pheno, sampMap)
x
##generate some data
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
y <- matrix(c(3,3,3, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
pheno <- DataFrame(id = 1:3, type = c("a", "a", "b"),
sex = c("M", "F", "M"),
row.names = c("sample1", "sample2", "sample3"))
expList <- list(exp1 = x, exp2 = y)
map1 <- DataFrame(primary = c("sample1", "sample2", "sample3"),
colname = paste0("sample", LETTERS[1:3]))
map2 <- DataFrame(primary = c("sample1", "sample2", "sample3"),
colname = paste0("samp", letters[1:3]))
sampMap <- listToMap(list(exp1 = map1, exp2 = map2))
mae <- MultiAssayExperiment(expList, pheno, sampMap)
x
y
Xse <- SummarizedExperiment(x)
Yse < -SummerizedExperiment(y)
Yse <- SummerizedExperiment(y)
Yse <- SummarizedExperiment(y)
sampMap
mae <- MultiAssayExperiment(expList, pheno, sampMap)
expList
pheno
mae <- MultiAssayExperiment(expList, pheno, sampMap)
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
y <- matrix(c(3,3,3, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
pheno <- DataFrame(id = 1:3, type = c("a", "a", "b"),
sex = c("M", "F", "M"),
row.names = c("sample1", "sample2", "sample3"))
expList <- list(exp1 = x, exp2 = y)
map1 <- DataFrame(primary = c("sample1", "sample2", "sample3"),
colname = c("sample1", "sample2", "sample3"))
map2 <- DataFrame(primary = c("sample1", "sample2", "sample3"),
colname = c("sample1", "sample2", "sample3"))
sampMap <- listToMap(list(exp1 = map1, exp2 = map2))
mae <- MultiAssayExperiment(expList, pheno, sampMap)
mae
assays(mae)
assays(mae)$exp1
library(RaggedExperiment)
RaggedExperiment(x)
sample1 <- GRanges(
c(GENEA = "chr1:1-10:-", GENEB = "chr2:15-18:+", GENEC = "chr2:11-18:+"),
score = c(1,1,1))
sample2 <- GRanges(
c(GENEA = "chr1:1-10:-", GENEC = "chr2:11-18:+", GENEB = "chr2:15-18:+"),
score = c(2,2,2))
sample3 <- GRanges(
c(GENEA = "chr1:1-10:-", GENEC = "chr2:11-18:+", GENEB = "chr2:15-18:+"),
score =c(3,3,3))
colDat <- DataFrame(id = 1:3)
ragexp <- RaggedExperiment(sample1 = sample1,
sample2 = sample2,
sample3 = sample3,
colData = colDat)
Xragexp <- RaggedExperiment(sample1 = sample1,
sample2 = sample2,
sample3 = sample3,
colData = colDat)
Yragexp <- RaggedExperiment(sample1 = sample3,
sample2 = sample2,
sample3 = sample3,
colData = colDat)
mae <- MultiAssayExperiment(expList, pheno, sampMap)
Xse <- SummarizedExperiment(x)
Yse <- SummarizedExperiment(y)
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
y <- matrix(c(3,3,3, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
pheno <- DataFrame(id = 1:3, type = c("a", "a", "b"),
sex = c("M", "F", "M"),
row.names = c("sample1", "sample2", "sample3"))
expList <- list(exp1 = x, exp2 = y)
map1 <- DataFrame(primary = c("sample1", "sample2", "sample3"),
colname = c("sample1", "sample2", "sample3"))
map2 <- DataFrame(primary = c("sample1", "sample2", "sample3"),
colname = c("sample1", "sample2", "sample3"))
sampMap <- listToMap(list(exp1 = map1, exp2 = map2))
sample1 <- GRanges(
c(GENEA = "chr1:1-10:-", GENEB = "chr2:15-18:+", GENEC = "chr2:11-18:+"),
score = c(1,1,1))
sample2 <- GRanges(
c(GENEA = "chr1:1-10:-", GENEC = "chr2:11-18:+", GENEB = "chr2:15-18:+"),
score = c(2,2,2))
sample3 <- GRanges(
c(GENEA = "chr1:1-10:-", GENEC = "chr2:11-18:+", GENEB = "chr2:15-18:+"),
score =c(3,3,3))
colDat <- DataFrame(id = 1:3)
Xragexp <- RaggedExperiment(sample1 = sample1,
sample2 = sample2,
sample3 = sample3,
colData = colDat)
Yragexp <- RaggedExperiment(sample1 = sample3,
sample2 = sample2,
sample3 = sample3,
colData = colDat)
mae <- MultiAssayExperiment(expList, pheno, sampMap)
Xse <- SummarizedExperiment(x)
Yse <- SummarizedExperiment(y)
alleleSharing(x, y)
alleleSharing(Xse, Yse)
Xse
Xse <- SummarizedExperiment(gentype = x)
Xse <- SummarizedExperiment(assays = x)
Xse
?SummarizedExperiment
Xse <- SummarizedExperiment(assays = list(a = x, b=y))
Xse
Yse <- SummarizedExperiment(list(a=y))
Yse
res <- alleleSharing(Xse)
res <- alleleSharing(Xse, "a")
res <- alleleSharing(Xse, assayNameX = "a")
res
res <- alleleSharing(Xse, assayNameX = "a", assayNameY = "b")
res
Xexpected <- alleleSharing(x)
XYexpected <- alleleSharing(x, x)
expect_equal(alleleSharing(Xse, assayNameX = "a"), Xexpected)
expect_equal(alleleSharing(Xse, assayNameX = "c"), Xexpected)
expect_equal(X1, Xexpected)
X1 <- alleleSharing(Xse, assayNameX = "c")
expect_equal(X1, Xexpected)
expect_equal(alleleSharing(Xse, assayNameX = "b"), Xexpected)
expect_equal(alleleSharing(Xse, assayNameX = "a"), Xexpected)
expect_equal(alleleSharing(Xse, Xse, assayNameX = "a", assayNameY = "b"))
expect_equal(alleleSharing(Xse, Xse, assayNameX = "a", assayNameY = "b"), XYexpected)
XYexpected <- alleleSharing(x, x)
expect_equal(alleleSharing(Xse, Xse, assayNameX = "a", assayNameY = "b"), XYexpected)
expect_equal(alleleSharing(Xse, Yse, assayNameX = "a", assayNameY = "a"), XYexpected)
XYexpected
res <- alleleSharing(Xse, Yse, assayNameX = "a", assayNameY = "a")
res
Yse <- SummarizedExperiment(list(a=x))
XYexpected <- alleleSharing(x, x)
expect_equal(alleleSharing(Xse, Yse, assayNameX = "a", assayNameY = "a"), XYexpected)
expect_equal(alleleSharing(Xse, assayNameX = "a", assayNameY = "b"), XYexpected)
Xse <- SummarizedExperiment(assays = list(a = x, b=x))
expect_equal(alleleSharing(Xse, assayNameX = "a", assayNameY = "b"), XYexpected)
expect_equal(alleleSharing(x, Yse, assayNameX = "a", assayNameY = "a"), XYexpected)
library(testthat)
library(omicsPrint)
getwd()
setwd("Desktop/git/omicsPrint/")
devtools::document()
devtools::inst()
devtools::install()
test_package("omicsPrint")
devtools::document()
devtools::install()
test_package("omicsPrint")
devtools::document()
devtools::install()
test_package("omicsPrint")
test_that("MultiAssayExperiment input alleleSharing", {
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
pheno <- data.frame(id = 1:3, type = c("a", "a", "b"),
sex = c("M", "F", "M"),
row.names = c("sample1", "sample2", "sample3"))
expList <- list(exp1 = x, exp2 = x)
map1 <- data.frame(primary = c("sample1", "sample2", "sample3"),
colname = c("sample1", "sample2", "sample3"))
map2 <- data.frame(primary = c("sample1", "sample2", "sample3"),
colname = c("sample1", "sample2", "sample3"))
sampMap <- listToMap(list(exp1 = map1, exp2 = map2))
maeX <- MultiAssayExperiment(expList, pheno, sampMap)
maeY <- MultiAssayExperiment(expList, pheno, sampMap)
Xexpected <- alleleSharing(x)
XYexpected <- alleleSharing(x, x)
expect_equal(alleleSharing(maeX, assayNameX = "exp1"), Xexpected)
expect_equal(alleleSharing(maeX, maeY, assayNameX = "exp1", assayNameY = "exp2"), XYexpected)
expect_equal(alleleSharing(maeX, assayNameX = "exp1", assayNameY = "exp2"), XYexpected)
})
test_that("MultiAssayExperiment input alleleSharing", {
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
pheno <- data.frame(id = 1:3, type = c("a", "a", "b"),
sex = c("M", "F", "M"),
row.names = c("sample1", "sample2", "sample3"))
expList <- list(exp1 = x, exp2 = x)
map1 <- data.frame(primary = c("sample1", "sample2", "sample3"),
colname = c("sample1", "sample2", "sample3"))
map2 <- data.frame(primary = c("sample1", "sample2", "sample3"),
colname = c("sample1", "sample2", "sample3"))
sampMap <- MultiAssayExperiment::listToMap(list(exp1 = map1, exp2 = map2))
maeX <- MultiAssayExperiment(expList, pheno, sampMap)
maeY <- MultiAssayExperiment(expList, pheno, sampMap)
Xexpected <- alleleSharing(x)
XYexpected <- alleleSharing(x, x)
expect_equal(alleleSharing(maeX, assayNameX = "exp1"), Xexpected)
expect_equal(alleleSharing(maeX, maeY, assayNameX = "exp1", assayNameY = "exp2"), XYexpected)
expect_equal(alleleSharing(maeX, assayNameX = "exp1", assayNameY = "exp2"), XYexpected)
})
test_that("MultiAssayExperiment input alleleSharing", {
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
pheno <- data.frame(id = 1:3, type = c("a", "a", "b"),
sex = c("M", "F", "M"),
row.names = c("sample1", "sample2", "sample3"))
expList <- list(exp1 = x, exp2 = x)
map1 <- data.frame(primary = c("sample1", "sample2", "sample3"),
colname = c("sample1", "sample2", "sample3"))
map2 <- data.frame(primary = c("sample1", "sample2", "sample3"),
colname = c("sample1", "sample2", "sample3"))
sampMap <- MultiAssayExperiment::listToMap(list(exp1 = map1, exp2 = map2))
maeX <- MultiAssayExperiment::MultiAssayExperiment(expList, pheno, sampMap)
maeY <- MultiAssayExperiment::MultiAssayExperiment(expList, pheno, sampMap)
Xexpected <- alleleSharing(x)
XYexpected <- alleleSharing(x, x)
expect_equal(alleleSharing(maeX, assayNameX = "exp1"), Xexpected)
expect_equal(alleleSharing(maeX, maeY, assayNameX = "exp1", assayNameY = "exp2"), XYexpected)
expect_equal(alleleSharing(maeX, assayNameX = "exp1", assayNameY = "exp2"), XYexpected)
})
test_that("RaggedExperiment input alleleSharing", {
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
sample1 <- GRanges(
c(GENEA = "chr1:1-10:-", GENEB = "chr2:15-18:+", GENEC = "chr2:11-18:+"),
score = c(1,1,1))
sample2 <- GRanges(
c(GENEA = "chr1:1-10:-", GENEC = "chr2:11-18:+", GENEB = "chr2:15-18:+"),
score = c(2,2,2))
sample3 <- GRanges(
c(GENEA = "chr1:1-10:-", GENEC = "chr2:11-18:+", GENEB = "chr2:15-18:+"),
score =c(3,3,3))
colDat <- DataFrame(id = 1:3)
Xragexp <- RaggedExperiment(sample1 = sample1,
sample2 = sample2,
sample3 = sample3,
colData = colDat)
Yragexp <- RaggedExperiment(sample1 = sample1,
sample2 = sample2,
sample3 = sample3,
colData = colDat)
Xexpected <- alleleSharing(x)
XYexpected <- alleleSharing(x, x)
expect_equal(alleleSharing(Xragexp), Xexpected)
expect_equal(alleleSharing(Xragexp, Yragexp), XYexpected)
})
??Granges
??DataFrame
test_that("RaggedExperiment input alleleSharing", {
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
sample1 <- GenomicRanges::Ranges(
c(GENEA = "chr1:1-10:-", GENEB = "chr2:15-18:+", GENEC = "chr2:11-18:+"),
score = c(1,1,1))
sample2 <- GenomicRanges::GRanges(
c(GENEA = "chr1:1-10:-", GENEC = "chr2:11-18:+", GENEB = "chr2:15-18:+"),
score = c(2,2,2))
sample3 <- GenomicRanges::GRanges(
c(GENEA = "chr1:1-10:-", GENEC = "chr2:11-18:+", GENEB = "chr2:15-18:+"),
score =c(3,3,3))
colDat <- data.frame(id = 1:3)
Xragexp <- RaggedExperiment::RaggedExperiment(sample1 = sample1,
sample2 = sample2,
sample3 = sample3,
colData = colDat)
Yragexp <- RaggedExperiment::RaggedExperiment(sample1 = sample1,
sample2 = sample2,
sample3 = sample3,
colData = colDat)
Xexpected <- alleleSharing(x)
XYexpected <- alleleSharing(x, x)
expect_equal(alleleSharing(Xragexp), Xexpected)
expect_equal(alleleSharing(Xragexp, Yragexp), XYexpected)
})
??Granges
test_that("RaggedExperiment input alleleSharing", {
x <- matrix(c(1,1,1, 2, 2, 2, 3, 3, 3), 3,3,
dimnames=list(paste0("SNP", 1:3),
paste0("sample", 1:3)))
sample1 <- GenomicRanges::GRanges(
c(GENEA = "chr1:1-10:-", GENEB = "chr2:15-18:+", GENEC = "chr2:11-18:+"),
score = c(1,1,1))
sample2 <- GenomicRanges::GRanges(
c(GENEA = "chr1:1-10:-", GENEC = "chr2:11-18:+", GENEB = "chr2:15-18:+"),
score = c(2,2,2))
sample3 <- GenomicRanges::GRanges(
c(GENEA = "chr1:1-10:-", GENEC = "chr2:11-18:+", GENEB = "chr2:15-18:+"),
score =c(3,3,3))
colDat <- data.frame(id = 1:3)
Xragexp <- RaggedExperiment::RaggedExperiment(sample1 = sample1,
sample2 = sample2,
sample3 = sample3,
colData = colDat)
Yragexp <- RaggedExperiment::RaggedExperiment(sample1 = sample1,
sample2 = sample2,
sample3 = sample3,
colData = colDat)
Xexpected <- alleleSharing(x)
XYexpected <- alleleSharing(x, x)
expect_equal(alleleSharing(Xragexp), Xexpected)
expect_equal(alleleSharing(Xragexp, Yragexp), XYexpected)
})
devtools::document()
devtools::install()
test_package("omicsPrint")
load("../../../Downloads/hm450.manifest.pop.GoNL.RData")
hm450.manifest.pop.GoNL
f <- read.csv("/home/dcats/Desktop/tsv filter/filtered.tsv")
f <- read.csv("/home/dcats/Desktop/tsv filter/filtered.tsv", sep="\t")
geneNames <- f$INFO.VEP_SYMBOL
geneNames <- unlist(f$INFO.VEP_SYMBOL)
head(geneNames)
geneNames <- f[["INFO.VEP_SYMBOL"]]
head(geneNames)
geneNames <- unique(f[["INFO.VEP_SYMBOL"]])
head(geneNames)
geneNames <- as.character(unique(f[["INFO.VEP_SYMBOL"]]))
write(geneNames, "/home/dcats/Desktop/tsv filter/geneNames.txt")
write(geneNames, "/home/dcats/Desktop/tsv filter/geneNames.txt", sep="\n")
View(f)
f[f$INFO.VEP_SYMBOL == "RYBP"]
f[f$INFO.VEP_SYMBOL == "RYBP",]
f[f["INFO.VEP_SYMBOL"] == "RYBP",]
f[f[["INFO.VEP_SYMBOL"]] == "RYBP",]
f[["INFO.VEP_SYMBOL"]] == "RYBP"
i <- f[["INFO.VEP_SYMBOL"]] == "RYBP"
i[is.na(i)] < -F
i <- f[["INFO.VEP_SYMBOL"]] == "RYBP"
i[is.na(i)] <- F
i
f[i,]
geneNames <- as.character(unique(f$INFO.VEP_Gene))
geneNames
geneIDs <- as.character(unique(f$INFO.VEP_Gene))
write(geneIDs "/home/dcats/Desktop/tsv filter/geneNames.txt", sep="\n")
write(geneIDs, "/home/dcats/Desktop/tsv filter/geneIDs.txt", sep="\n")
